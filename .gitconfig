[core]
    autocrlf = false
    editor = code --wait
[merge]
    tool = meld
    conflictstyle = diff3
[diff]
    tool = meld
[difftool]
    prompt = false
    cmd = meld "$LOCAL" "$REMOTE"
[mergetool]
    prompt = false
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    #cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
    keepBackup = false
[commit]
    # Change to proper directory depending on machine
    template = /home/grofftech/Dropbox/git/commit_message_template
[alias]
	# =============================
	# Log Aliases
	# =============================

	# Shows a graphical log for all branches
	logone = log --oneline --decorate --all --graph

	# Show the log entry for the last commit with a summary
	loglast = show --summary

	# Show the history of the current branch you are on
    # with cherry picks
	logbranchc = log --cherry --oneline --graph --decorate

	# Log Branch Current
    # Show the history of the current branch you are on
	logbranch = log --oneline --graph --decorate

    # Log Branch
    # Show the history of the supplied branch
	logbranchb = "!f() { \
        BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the branch name\"; exit -1; \
		fi; \
		git logbranch $BRANCH; \
	}; f"

    # =============================
	# Status Aliases
	# =============================

	# Status
    # Display status with branch (shows changes as list)
	st = status --short --branch

	# =============================
	# Diff Aliases
	# =============================

	# Diff Directory
	diffdir = difftool --dir-diff

	# Diff Directory Cached
	diffdirc = difftool --dir-diff --cached

	# =============================
	# Staging Aliases
	# =============================

	# Stage File
	# If no argument is supplied, stages all changes
	# If one file argument supplied, stage that change only
    stagef = "!f() { \
        clear; \
        if [ -z $1 ]; \
        then git add .; \
        else git add $1; \
        fi; \
        git st; \
        if [ -z $1 ]; \
        then echo \"Added all pending changes to staging!\"; \
        else echo \"Added '$1' to staging!\"; \
        fi; \
    }; f"

    # Stage Diff
    # Stage all modified files and run a diff for all directories
    stagediff = "!f() { \
        clear; \
        if [ -z $1 ]; \
        then git add .; \
        else git add $1; \
        fi; \
        git st; \
        if [ -z $1 ]; \
        then echo \"Added all pending changes to staging!\"; \
        else echo \"Added '$1' to staging!\"; \
        fi; \
        echo \"Comparing staged file(s)...\"; \
        git diffdirc; \
    }; f"

	# Unstage
	# If no argument is supplied, unstages all files.
	# If one file argument supplied, ustages it.
	unstage = "!f() { \
		clear; \
		git reset HEAD ${1-'--'}; \
		git st; \
		if [ -z $1 ]; \
		then echo \"Removed all changes from staging. Changes are now pending!\"; \
		else echo \"Removed '$1' from staging. '$1' is now pending!\"; \
		fi; \
	}; f"

	# =============================
	# Commit Aliases
	# =============================

	# Commit All
	# If no message argument supplied, opens configured editor for message.
	# If message argument supplied, performs commit.
	commita = "!f() { \
		if [ -z $1 ]; \
		then git commit; \
		else git commit -m \"$1\"; \
		fi; \
		clear; \
		git loglast; \
		echo \"All changes committed!\"; \
		git st; \
	}; f"

	# Uncommit
	uncommit = "!f() { \
		git reset HEAD^ -q; \
		clear; \
		git st; \
		echo \"Reverted the last commit. Changes are now pending!\"; \
	}; f"

	# Reword
	# Open the editor and change the last commit
	# Any pending changes in staging will be stashed and then re-applied after change
	reword = "!f() { \
		git stash; \
		git commit --amend; \
		git stash pop; \
		clear; \
		git loglast; \
		echo \"Updated the last commit message!\"; \
	}; f"

	# Add To
	# Adds all staged changes to last commit, will not change the commit message
	addto = "!f() { \
		git commit -a --amend --no-edit; \
		clear; \
		git loglast; \
		echo \"Added all staged changes to the last commit!\"; \
	}; f"

	# Rollback
	# Undo any pending, staged or untracked changes. WARNING this is destructive, you will lose all your changes!
	rollback = "!f() { \
		git unstage; \
		git checkout -- .; \
		git clean -fd; \
		clear; \
		git st; \
		echo \"Rolled back to the last commit!\"; \
	}; f"

	# Commit All
    # Stage and commit all changes. Opens the commit message
	# in the configured editing application
	commitall = !git stagef && git commita

	# =============================
	# Branch Aliases
	# =============================

	# New Branch
	# Creates a new branch and checks it out
	newbranch = checkout -b

	# Switch Branch
	# Switches to an existing branch
	switchbranch = checkout

	# Branch Info
	# Gets verbose branch information for local/remote branches
	branchi = branch -a -vv

	# Delete Branch Remote
	# Deletes the local and remote branch when branch name is supplied
	deletebranchr = "!f() { \
		NAME=$1; \
		if [ -z $NAME ]; \
		then echo \"No branch name, please provide the branch name\"; exit -1; \
		fi; \
		clear; \
		git deletebranch $NAME; \
		git push origin --delete $NAME; \
	}; f"

	# Delete Branch
	# Deletes the local branch when branch name is supplied.
	deletebranch = "!f() { \
		NAME=$1; \
		if [ -z $NAME ]; \
		then echo \"No branch name, please provide the branch name\"; exit -1; \
		fi; \
		clear; \
		git branch -D $NAME; \
		echo \"Deleted the local ${NAME} branch!\"; \
		git branch; \
	}; f"

	# Delete Branches
    # Deletes local branches that are not tracked.
    # The first argument can be anything really (normally pass 'force')
    #
    # Be careful! This can delete in-progress work that
    # has already been committed/pushed.
	deletebranches = "!f() { \
		FORCE=$1; \
		if [ -z $FORCE ]; \
		then git branch -vv | grep -v origin | grep -v '\\*' | awk '{print $1}' | xargs -r git branch -d; \
		else git branch -vv | grep -v origin | grep -v '\\*' | awk '{print $1}' | xargs -r git branch -D; \
		fi; \
		git branch -vv; \
	}; f"

	# Rename Branch
	# Renames the current branch
	renamebranch = "!f() { \
		NEW_NAME=$1; \
		if [ -z $NEW_NAME ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		clear; \
		git branch -m $NEW_NAME; \
		echo \"Renamed the current branch to ${NEW_NAME}\"; \
		git branch; \
	}; f"

	# Push Remote
	# Pushes the current branch you're on to the remote repository
	pushremote = "!f() { \
		clear; \
		BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
		echo \"Pushing $BRANCH branch to remote...\"; \
		git push origin $BRANCH; \
	}; f"

	# Get Branch
	# Gets the specified branch from remote, and then asks if
	# changes should be merged into the local branch.
	getbranch = "!f() { \
		BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git checkout $BRANCH; \
		git fetchremote origin $BRANCH; \
		read -N 1 -p \"Do you want to continue merging ${BRANCH} (y/n)?\" ANSWER; \
		if [ \"${ANSWER}\" == \"y\" ]; \
		then printf \"\n\" && git merge origin/$BRANCH $BRANCH; \
		fi; \
	}; f"

	# Get Branch Current
	# Gets the current branch from remote, and then asks if
	# changes should be merged into the local branch.
	getbranchb = "!f() { \
		BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
		git checkout $BRANCH; \
		git fetchremote origin $BRANCH; \
		read -N 1 -p \"Do you want to continue merging ${BRANCH} (y/n)?\" ANSWER; \
		if [ \"${ANSWER}\" == \"y\" ]; \
		then printf \"\n\" && git merge origin/$BRANCH $BRANCH; \
		fi; \
	}; f"

    # Get Branch Remote
    # Gets the specified branch from remote without getting the latest and merging
    getbranchr = "!f() { \
        BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git fetch origin $BRANCH; \
		git checkout $BRANCH; \
	}; f"

    # Get Branch Remote & Merge
    # Get the specified branch from remote. Gets the latest changes and asks if you want to merge them in
    getbranchrm = "!f() { \
        BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git getbranchr $BRANCH; \
		git getbranch $BRANCH; \
	}; f"

    # Get Current Branch Remote & Merge
    # Gets the current branch you are on from remote. Gets the latest changes and asks if you want to merge them in
    getbranchrmb = "!f() { \
        BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
		git getbranchr $BRANCH; \
		git getbranch $BRANCH; \
	}; f"

	# Stop Tracking Branch
    # Removes a branch from being tracked on remote
	stoptracking = "!f() { \
		BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git branch --unset-upstream $BRANCH; \
	}; f"

	# Track Branch Remote
    # Tracks a branch on remote
	trackbranch = "!f() { \
		BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git checkout $BRANCH; \
		git branch -u origin/$BRANCH; \
	}; f"

    # Track Branch Current
    # Tracks the current branch on remote if it doesn't exist locally
    trackbranchb = "!f() { \
		BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
		git getbranchb; \
		git branch -u origin/$BRANCH; \
	}; f"

	# Show Head
    # Shows where HEAD is in the local repository
	showhead = "!f() { \
		git logone | grep "HEAD " --color=always; \
	}; f"

	# Show Head Remote
    # Shows were HEAD is for the remote in the local repository
	showremotehead = "!f() { \
		git logone | grep "origin/HEAD" --color=always; \
	}; f"

    # =============================
	# Merge aliases
	# =============================

	# Merge Cleanup
    # Deletes any .orig files that do not get
	# deleted as part of resolving merge conflicts
	mergecleanup = "!f() { \
		find . -name '*.orig' -delete -print; \
	}; f"

    # Merge Branch
    # Gets the lastest from supplied branch and merges
    # it into the current branch you are working on.
    mergebranch = "!f() { \
        CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
        BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
        git getbranch $BRANCH; \
        git checkout $CURRENT_BRANCH; \
        git merge $BRANCH; \
	}; f"

	# =============================
	# Stash Alias
	# =============================

	# Stash List
    # List the current stashes.
	stashlist = stash list

    # Stash Apply
	# Applies a stash by index
	stashapply = "!f() { \
		INDEX=$1; \
		if [ -z $INDEX ]; \
        then echo \"No index, please provide the stash index\"; exit 1; \
        fi; \
		git stash apply stash@{$INDEX}; \
        git stashdelete $INDEX; \
		git st; \
	}; f"

    # Stash Apply Latest
	# Applies the latest stash
	stashapplyl = "!f() { \
		git stash pop; \
		git st; \
	}; f"

    # Stash All
    # Stashes all changes including untracked files
    # If a message is provided will stash with message. Message must be double # quoted (e.g. git stashall ""Stash message"")
    stashall = "!f() { \
		MESSAGE=$1; \
		if [ -z "$MESSAGE" ]; \
        then git stash --include-untracked; \
        else git stash save --include-untracked $MESSAGE; \
        fi; \
	}; f"

    # Stash Tracked
    # Stashes all tracked file changes
    # If a message is provided will stash with message. Message must be double # quoted (e.g. git stashtracked ""Stash message"")
    stashtracked = "!f() { \
		MESSAGE=$1; \
		if [ -z "$MESSAGE" ]; \
        then git stash; \
        else git stash save $MESSAGE; \
        fi; \
	}; f"

    # Stash Delete
    # Delete all stashes
    stashdelete = "!f() { \
		INDEX=$1; \
		if [ -z $INDEX ]; \
        then echo \"No index, please provide the stash index\"; exit 1; \
        fi; \
		git stash drop stash@{$INDEX}; \
		git stashlist; \
	}; f"

    # =============================
    # Tag aliases
    # =============================

    # Add Tag
    # Adds an annotated tag. If no argument for message is provided it
    # will open configured editor, otherwise it adds the tag with message provided.
    # Message is argument #2 and needs to be double quoted (e.g. ""Tag Message"")
    tagadd = "!f() { \
        tag=$1; \
        message=$2; \
        if [ -z $tag ]; \
        then echo \"No tag name, please provide the tag name\"; exit 1; \
        fi; \
        if [ ! -z $tag ] && [ -z $message ]; \
        then git tag -a $tag && echo \"Added tag ${tag}! \"; \
        fi; \
        if [ ! -z $tag ] && [ ! -z $message ]; \
        then git tag -a $tag -m $message && echo \"Added tag ${tag} with message ${message}!\"; \
        fi; \
    }; f"

    # Delete Tag
    tagdelete = "!f() { \
        TAG=$1; \
        if [ -z $TAG ]; \
        then echo \"No tag name, please provide the tag name\"; exit 1; \
        fi; \
        git tag -d $TAG; \
    }; f"

    # Push Tag
    # Pushes a tag to a remote repository using the remote name (e.g. origin)
    # and the tag name
    tagpush = "!f() { \
        REMOTE=$1; \
        TAG=$2; \
        if [ -z $REMOTE ]; \
        then echo \"No remote name, please provide the remote name\"; exit 1; \
        fi; \
        if [ ! -z $REMOTE ] && [ -z $TAG ]; \
        then echo \"No tag name, please provide the tag name\"; exit 1; \
        fi; \
        git push $REMOTE $TAG; \
        echo \"Pushed ${TAG} to ${REMOTE}!\"; \
    }; f"

    # Delete Tag Remote
    # Requires the remote name (e.g. origin) and the tag name
    tagdeleteremote = "!f() { \
        REMOTE=$1; \
        TAG=$2; \
        if [ -z $REMOTE ]; \
        then echo \"No remote name, please provide the remote name\"; exit 1; \
        fi; \
        if [ ! -z $REMOTE ] && [ -z $TAG ]; \
        then echo \"No tag name, please provide the tag name\"; exit 1; \
        fi; \
        git push $REMOTE --delete $TAG; \
        echo \"Deleted ${TAG} from ${REMOTE}!\"; \
    }; f"

    # =============================
    # Remote Aliases
    # =============================

    # Fetch Remote
    # Fetches latest remote for supplied branch and shows the commits
    fetchremote = "!f() { \
        REMOTE=$1; \
        BRANCH=$2; \
        if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
        fi; \
        git fetch $REMOTE $BRANCH && git branch -a -vv | grep $BRANCH; \
    }; f"

    # Fetch Remote Branch
    # Fetches latest remote for the branch you are on and shows the commits
    fetchremoteb = "!f() { \
        REMOTE=$1; \
        BRANCH="$(git rev-parse --abbrev-ref HEAD)"; \
        if [ -z $REMOTE ]; \
        then echo \"No remote name, please provide the remote name\"; exit 1; \
        fi; \
        git fetch $REMOTE $BRANCH && git branch -a -vv | grep $BRANCH; \
    }; f"

    # Prune Remote
    # Deletes local remote branches from a specified remote without
    # fetching data
    pruneremote = "!f() { \
        REMOTE=$1; \
        if [ -z $REMOTE ]; \
        then echo \"No remote name, please provide the remote name\"; exit 1; \
        fi; \
        git remote prune $REMOTE; \
        git branchi; \
    }; f"

    # Prune Remote Fetch
    # Deletes local remote branches from a specified remote after
    # fetching data
    pruneremotef = "!f() { \
        REMOTE=$1; \
        if [ -z $REMOTE ]; \
        then echo \"No remote name, please provide the remote name\"; exit 1; \
        fi; \
        git fetch --prune $REMOTE; \
        git branchi ;\
    }; f"

	# =============================
	# Config Aliases
	# =============================

	# Alias List
    # List the global aliases in alphabetical order
	aliaslist = !git config --list | grep ^alias\\. | cut -d '=' -f 1 | sort

	# Global Config
    # Open the global config file for editing
	globalconfig = config --global --edit

    # =============================
    # Combination aliases
    # =============================

    # Stage and Diff
    # Stage all files and diff them
    stagediff = "!f() { \
        git stagef && git diffdir --cached; \
    }; f"

	# =============================
	# Submodule aliases
	# =============================

	# Diff for main project and submodules
	sdiff = !git diff && git submodule foreach 'git diff'

	# Diff for main project and submodules using configured difftool
	sdifftool = !git difftool && git submodule foreach 'git difftool'

	# Diff for main project and submodules using configured difftool with directory comparison
	sdifftooldir = !git difftool --dir-dif && git submodule foreach 'git difftool --dir-dif'

	# Push changes, check if submodules have been pushed. If they haven't, this will abort
	spushchk = push --recurse-submodules=check

	# Push changes, checking if submodules have been pushed. If they haven't, this will push them
	spush = push --recurse-submodules=on-demand

	# Update the submodules using merge
	supdatem = submodule update --remote --merge

	# Update the submodules using rebase
	supdater = submodule update --remote --rebase

    # =============================
	# Testing
	# =============================

	# Used for testing functions in git aliases
	testing = "!f() { \
		BRANCH=$1; \
		if [ -z $BRANCH ]; \
		then echo \"No branch name, please provide the new branch name\"; exit -1; \
		fi; \
		git branch --unset-upstream $BRANCH; \
	}; f"
